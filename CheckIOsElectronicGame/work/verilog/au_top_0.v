/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    input usb_rx,
    output reg usb_tx,
    output reg [109:0] blink
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [1-1:0] M_slowclock_value;
  counter_2 slowclock (
    .clk(clk),
    .rst(rst),
    .value(M_slowclock_value)
  );
  
  
  localparam STATE0_state = 1'd0;
  localparam STATE1_state = 1'd1;
  
  reg M_state_d, M_state_q = STATE0_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    blink[0+0-:1] = 1'h0;
    blink[1+0-:1] = 1'h0;
    blink[2+0-:1] = 1'h0;
    blink[3+0-:1] = 1'h0;
    blink[4+0-:1] = 1'h0;
    blink[5+0-:1] = 1'h0;
    blink[6+0-:1] = 1'h0;
    blink[7+0-:1] = 1'h0;
    blink[8+0-:1] = 1'h0;
    blink[9+0-:1] = 1'h0;
    blink[10+0-:1] = 1'h0;
    blink[11+0-:1] = 1'h0;
    blink[12+0-:1] = 1'h0;
    blink[13+0-:1] = 1'h0;
    blink[14+0-:1] = 1'h0;
    blink[15+0-:1] = 1'h0;
    blink[16+0-:1] = 1'h0;
    blink[17+0-:1] = 1'h0;
    blink[18+0-:1] = 1'h0;
    blink[19+0-:1] = 1'h0;
    blink[20+0-:1] = 1'h0;
    blink[21+0-:1] = 1'h0;
    blink[22+0-:1] = 1'h0;
    blink[23+0-:1] = 1'h0;
    blink[24+0-:1] = 1'h0;
    blink[25+0-:1] = 1'h0;
    blink[26+0-:1] = 1'h0;
    blink[27+0-:1] = 1'h0;
    blink[28+0-:1] = 1'h0;
    blink[29+0-:1] = 1'h0;
    blink[30+0-:1] = 1'h0;
    blink[31+0-:1] = 1'h0;
    blink[32+0-:1] = 1'h0;
    blink[33+0-:1] = 1'h0;
    blink[34+0-:1] = 1'h0;
    blink[35+0-:1] = 1'h0;
    blink[36+0-:1] = 1'h0;
    blink[37+0-:1] = 1'h0;
    blink[38+0-:1] = 1'h0;
    blink[39+0-:1] = 1'h0;
    blink[40+0-:1] = 1'h0;
    blink[41+0-:1] = 1'h0;
    blink[42+0-:1] = 1'h0;
    blink[43+0-:1] = 1'h0;
    blink[44+0-:1] = 1'h0;
    blink[45+0-:1] = 1'h0;
    blink[46+0-:1] = 1'h0;
    blink[47+0-:1] = 1'h0;
    blink[48+0-:1] = 1'h0;
    blink[49+0-:1] = 1'h0;
    blink[50+0-:1] = 1'h0;
    blink[51+0-:1] = 1'h0;
    blink[52+0-:1] = 1'h0;
    blink[53+0-:1] = 1'h0;
    blink[54+0-:1] = 1'h0;
    blink[55+0-:1] = 1'h0;
    blink[56+0-:1] = 1'h0;
    blink[57+0-:1] = 1'h0;
    blink[58+0-:1] = 1'h0;
    blink[59+0-:1] = 1'h0;
    blink[60+0-:1] = 1'h0;
    blink[61+0-:1] = 1'h0;
    blink[62+0-:1] = 1'h0;
    blink[63+0-:1] = 1'h0;
    blink[64+0-:1] = 1'h0;
    blink[65+0-:1] = 1'h0;
    blink[66+0-:1] = 1'h0;
    blink[67+0-:1] = 1'h0;
    blink[68+0-:1] = 1'h0;
    blink[69+0-:1] = 1'h0;
    blink[70+0-:1] = 1'h0;
    blink[71+0-:1] = 1'h0;
    blink[72+0-:1] = 1'h0;
    blink[73+0-:1] = 1'h0;
    blink[74+0-:1] = 1'h0;
    blink[75+0-:1] = 1'h0;
    blink[76+0-:1] = 1'h0;
    blink[77+0-:1] = 1'h0;
    blink[78+0-:1] = 1'h0;
    blink[79+0-:1] = 1'h0;
    blink[80+0-:1] = 1'h0;
    blink[81+0-:1] = 1'h0;
    blink[82+0-:1] = 1'h0;
    blink[83+0-:1] = 1'h0;
    blink[84+0-:1] = 1'h0;
    blink[85+0-:1] = 1'h0;
    blink[86+0-:1] = 1'h0;
    blink[87+0-:1] = 1'h0;
    blink[88+0-:1] = 1'h0;
    blink[89+0-:1] = 1'h0;
    blink[90+0-:1] = 1'h0;
    blink[91+0-:1] = 1'h0;
    blink[92+0-:1] = 1'h0;
    blink[93+0-:1] = 1'h0;
    blink[94+0-:1] = 1'h0;
    blink[95+0-:1] = 1'h0;
    blink[96+0-:1] = 1'h0;
    blink[97+0-:1] = 1'h0;
    blink[98+0-:1] = 1'h0;
    blink[99+0-:1] = 1'h0;
    blink[100+0-:1] = 1'h0;
    blink[101+0-:1] = 1'h0;
    blink[102+0-:1] = 1'h0;
    blink[103+0-:1] = 1'h0;
    blink[104+0-:1] = 1'h0;
    blink[105+0-:1] = 1'h0;
    blink[106+0-:1] = 1'h0;
    blink[107+0-:1] = 1'h0;
    blink[108+0-:1] = 1'h0;
    blink[109+0-:1] = 1'h0;
    
    case (M_state_q)
      STATE0_state: begin
        blink[0+0-:1] = 1'h0;
        blink[1+0-:1] = 1'h0;
        blink[2+0-:1] = 1'h0;
        blink[3+0-:1] = 1'h0;
        blink[4+0-:1] = 1'h0;
        blink[5+0-:1] = 1'h0;
        blink[6+0-:1] = 1'h0;
        blink[7+0-:1] = 1'h0;
        blink[8+0-:1] = 1'h0;
        blink[9+0-:1] = 1'h0;
        blink[10+0-:1] = 1'h0;
        blink[11+0-:1] = 1'h0;
        blink[12+0-:1] = 1'h0;
        blink[13+0-:1] = 1'h0;
        blink[14+0-:1] = 1'h0;
        blink[15+0-:1] = 1'h0;
        blink[16+0-:1] = 1'h0;
        blink[17+0-:1] = 1'h0;
        blink[18+0-:1] = 1'h0;
        blink[19+0-:1] = 1'h0;
        blink[20+0-:1] = 1'h0;
        blink[21+0-:1] = 1'h0;
        blink[22+0-:1] = 1'h0;
        blink[23+0-:1] = 1'h0;
        blink[24+0-:1] = 1'h0;
        blink[25+0-:1] = 1'h0;
        blink[26+0-:1] = 1'h0;
        blink[27+0-:1] = 1'h0;
        blink[28+0-:1] = 1'h0;
        blink[29+0-:1] = 1'h0;
        blink[30+0-:1] = 1'h0;
        blink[31+0-:1] = 1'h0;
        blink[32+0-:1] = 1'h0;
        blink[33+0-:1] = 1'h0;
        blink[34+0-:1] = 1'h0;
        blink[35+0-:1] = 1'h0;
        blink[36+0-:1] = 1'h0;
        blink[37+0-:1] = 1'h0;
        blink[38+0-:1] = 1'h0;
        blink[39+0-:1] = 1'h0;
        blink[40+0-:1] = 1'h0;
        blink[41+0-:1] = 1'h0;
        blink[42+0-:1] = 1'h0;
        blink[43+0-:1] = 1'h0;
        blink[44+0-:1] = 1'h0;
        blink[45+0-:1] = 1'h0;
        blink[46+0-:1] = 1'h0;
        blink[47+0-:1] = 1'h0;
        blink[48+0-:1] = 1'h0;
        blink[49+0-:1] = 1'h0;
        blink[50+0-:1] = 1'h0;
        blink[51+0-:1] = 1'h0;
        blink[52+0-:1] = 1'h0;
        blink[53+0-:1] = 1'h0;
        blink[54+0-:1] = 1'h0;
        blink[55+0-:1] = 1'h0;
        blink[56+0-:1] = 1'h0;
        blink[57+0-:1] = 1'h0;
        blink[58+0-:1] = 1'h0;
        blink[59+0-:1] = 1'h0;
        blink[60+0-:1] = 1'h0;
        blink[61+0-:1] = 1'h0;
        blink[62+0-:1] = 1'h0;
        blink[63+0-:1] = 1'h0;
        blink[64+0-:1] = 1'h0;
        blink[65+0-:1] = 1'h0;
        blink[66+0-:1] = 1'h0;
        blink[67+0-:1] = 1'h0;
        blink[68+0-:1] = 1'h0;
        blink[69+0-:1] = 1'h0;
        blink[70+0-:1] = 1'h0;
        blink[71+0-:1] = 1'h0;
        blink[72+0-:1] = 1'h0;
        blink[73+0-:1] = 1'h0;
        blink[74+0-:1] = 1'h0;
        blink[75+0-:1] = 1'h0;
        blink[76+0-:1] = 1'h0;
        blink[77+0-:1] = 1'h0;
        blink[78+0-:1] = 1'h0;
        blink[79+0-:1] = 1'h0;
        blink[80+0-:1] = 1'h0;
        blink[81+0-:1] = 1'h0;
        blink[82+0-:1] = 1'h0;
        blink[83+0-:1] = 1'h0;
        blink[84+0-:1] = 1'h0;
        blink[85+0-:1] = 1'h0;
        blink[86+0-:1] = 1'h0;
        blink[87+0-:1] = 1'h0;
        blink[88+0-:1] = 1'h0;
        blink[89+0-:1] = 1'h0;
        blink[90+0-:1] = 1'h0;
        blink[91+0-:1] = 1'h0;
        blink[92+0-:1] = 1'h0;
        blink[93+0-:1] = 1'h0;
        blink[94+0-:1] = 1'h0;
        blink[95+0-:1] = 1'h0;
        blink[96+0-:1] = 1'h0;
        blink[97+0-:1] = 1'h0;
        blink[98+0-:1] = 1'h0;
        blink[99+0-:1] = 1'h0;
        blink[100+0-:1] = 1'h0;
        blink[101+0-:1] = 1'h0;
        blink[102+0-:1] = 1'h0;
        blink[103+0-:1] = 1'h0;
        blink[104+0-:1] = 1'h0;
        blink[105+0-:1] = 1'h0;
        blink[106+0-:1] = 1'h0;
        blink[107+0-:1] = 1'h0;
        blink[108+0-:1] = 1'h0;
        blink[109+0-:1] = 1'h0;
        M_state_d = STATE1_state;
      end
      STATE1_state: begin
        blink[0+0-:1] = 1'h1;
        blink[1+0-:1] = 1'h1;
        blink[2+0-:1] = 1'h1;
        blink[3+0-:1] = 1'h1;
        blink[4+0-:1] = 1'h1;
        blink[5+0-:1] = 1'h1;
        blink[6+0-:1] = 1'h1;
        blink[7+0-:1] = 1'h1;
        blink[8+0-:1] = 1'h1;
        blink[9+0-:1] = 1'h1;
        blink[10+0-:1] = 1'h1;
        blink[11+0-:1] = 1'h1;
        blink[12+0-:1] = 1'h1;
        blink[13+0-:1] = 1'h1;
        blink[14+0-:1] = 1'h1;
        blink[15+0-:1] = 1'h1;
        blink[16+0-:1] = 1'h1;
        blink[17+0-:1] = 1'h1;
        blink[18+0-:1] = 1'h1;
        blink[19+0-:1] = 1'h1;
        blink[20+0-:1] = 1'h1;
        blink[21+0-:1] = 1'h1;
        blink[22+0-:1] = 1'h1;
        blink[23+0-:1] = 1'h1;
        blink[24+0-:1] = 1'h1;
        blink[25+0-:1] = 1'h1;
        blink[26+0-:1] = 1'h1;
        blink[27+0-:1] = 1'h1;
        blink[28+0-:1] = 1'h1;
        blink[29+0-:1] = 1'h1;
        blink[30+0-:1] = 1'h1;
        blink[31+0-:1] = 1'h1;
        blink[32+0-:1] = 1'h1;
        blink[33+0-:1] = 1'h1;
        blink[34+0-:1] = 1'h1;
        blink[35+0-:1] = 1'h1;
        blink[36+0-:1] = 1'h1;
        blink[37+0-:1] = 1'h1;
        blink[38+0-:1] = 1'h1;
        blink[39+0-:1] = 1'h1;
        blink[40+0-:1] = 1'h1;
        blink[41+0-:1] = 1'h1;
        blink[42+0-:1] = 1'h1;
        blink[43+0-:1] = 1'h1;
        blink[44+0-:1] = 1'h1;
        blink[45+0-:1] = 1'h1;
        blink[46+0-:1] = 1'h1;
        blink[47+0-:1] = 1'h1;
        blink[48+0-:1] = 1'h1;
        blink[49+0-:1] = 1'h1;
        blink[50+0-:1] = 1'h1;
        blink[51+0-:1] = 1'h1;
        blink[52+0-:1] = 1'h1;
        blink[53+0-:1] = 1'h1;
        blink[54+0-:1] = 1'h1;
        blink[55+0-:1] = 1'h1;
        blink[56+0-:1] = 1'h1;
        blink[57+0-:1] = 1'h1;
        blink[58+0-:1] = 1'h1;
        blink[59+0-:1] = 1'h1;
        blink[60+0-:1] = 1'h1;
        blink[61+0-:1] = 1'h1;
        blink[62+0-:1] = 1'h1;
        blink[63+0-:1] = 1'h1;
        blink[64+0-:1] = 1'h1;
        blink[65+0-:1] = 1'h1;
        blink[66+0-:1] = 1'h1;
        blink[67+0-:1] = 1'h1;
        blink[68+0-:1] = 1'h1;
        blink[69+0-:1] = 1'h1;
        blink[70+0-:1] = 1'h1;
        blink[71+0-:1] = 1'h1;
        blink[72+0-:1] = 1'h1;
        blink[73+0-:1] = 1'h1;
        blink[74+0-:1] = 1'h1;
        blink[75+0-:1] = 1'h1;
        blink[76+0-:1] = 1'h1;
        blink[77+0-:1] = 1'h1;
        blink[78+0-:1] = 1'h1;
        blink[79+0-:1] = 1'h1;
        blink[80+0-:1] = 1'h1;
        blink[81+0-:1] = 1'h1;
        blink[82+0-:1] = 1'h1;
        blink[83+0-:1] = 1'h1;
        blink[84+0-:1] = 1'h1;
        blink[85+0-:1] = 1'h1;
        blink[86+0-:1] = 1'h1;
        blink[87+0-:1] = 1'h1;
        blink[88+0-:1] = 1'h1;
        blink[89+0-:1] = 1'h1;
        blink[90+0-:1] = 1'h1;
        blink[91+0-:1] = 1'h1;
        blink[92+0-:1] = 1'h1;
        blink[93+0-:1] = 1'h1;
        blink[94+0-:1] = 1'h1;
        blink[95+0-:1] = 1'h1;
        blink[96+0-:1] = 1'h1;
        blink[97+0-:1] = 1'h1;
        blink[98+0-:1] = 1'h1;
        blink[99+0-:1] = 1'h1;
        blink[100+0-:1] = 1'h1;
        blink[101+0-:1] = 1'h1;
        blink[102+0-:1] = 1'h1;
        blink[103+0-:1] = 1'h1;
        blink[104+0-:1] = 1'h1;
        blink[105+0-:1] = 1'h1;
        blink[106+0-:1] = 1'h1;
        blink[107+0-:1] = 1'h1;
        blink[108+0-:1] = 1'h1;
        blink[109+0-:1] = 1'h1;
        M_state_d = STATE0_state;
      end
    endcase
  end
  
  always @(posedge M_slowclock_value) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
